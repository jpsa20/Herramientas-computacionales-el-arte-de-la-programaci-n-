from random import randrange, choice
from turtle import *

from freegames import square, vector

# Colores permitidos para la comida (excluyendo rojo)
food_colors = ['blue', 'yellow', 'purple', 'orange', 'green']
current_food_color = choice(food_colors)

food = vector(0, 0)
snake = [vector(10, 0)]
aim = vector(0, -10)

# Direcciones posibles para que la comida se mueva
directions = [vector(10, 0), vector(-10, 0), vector(0, 10), vector(0, -10)]
food_direction = vector(0, 0)

def change(x, y):
    """Change snake direction."""
    aim.x = x
    aim.y = y

def inside(head):
    """Return True if head inside boundaries."""
    return -200 < head.x < 190 and -200 < head.y < 190

def move_food():
    """Move food in a random direction."""
    global food_direction

    if food_direction == vector(0, 0):
        food_direction = choice(directions)    

    new_position = food + food_direction

    if inside(new_position):
        food.move(food_direction)
    else:
        # Si la comida sale del límite, se elige una nueva dirección
        food_direction = choice(directions)

    ontimer(move_food, 400)  # Llama a esta función cada 400 ms

def move():
    """Move snake forward one segment."""
    global current_food_color  # Hacer que la variable sea accesible

    head = snake[-1].copy()
    head.move(aim)

    if not inside(head) or head in snake:
        square(head.x, head.y, 9, 'red')
        update()
        return

    snake.append(head)

    if head == food:
        print('Snake:', len(snake))
        food.x = randrange(-15, 15) * 10
        food.y = randrange(-15, 15) * 10
        # Cambia el color de la comida al azar al comerla
        current_food_color = choice(food_colors)
    else:
        snake.pop(0)

    clear()

    for body in snake:
        square(body.x, body.y, 9, 'black')

    # Dibuja la comida con el color actual
    square(food.x, food.y, 9, current_food_color)
    update()
    ontimer(move, 100)

setup(420, 420, 370, 0)
hideturtle()
tracer(False)
listen()
onkey(lambda: change(10, 0), 'Right')
onkey(lambda: change(-10, 0), 'Left')
onkey(lambda: change(0, 10), 'Up')
onkey(lambda: change(0, -10), 'Down')
move_food()
move()
done()
